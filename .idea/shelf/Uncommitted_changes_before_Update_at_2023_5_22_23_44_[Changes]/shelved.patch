Index: src/view/MusicFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport listener.MusicTool;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.event.ActionEvent;\r\n\r\npublic class MusicFrame extends JFrame{\r\n    private static JLabel music;\r\n    JButton jb1;\r\n    JButton jb2;\r\n    JButton jb3;\r\n    JButton jb4;\r\n    public MusicFrame(){\r\n        this.setTitle(\"音乐\");\r\n        this.setBounds(715,360,290,340);\r\n        this.setLayout(null);\r\n        this.setResizable(false);\r\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        this.setVisible(true);\r\n\r\n        music =new JLabel(new ImageIcon(\"image/music.png\")) ;\r\n        music.setBounds(0,0,277,308);\r\n        this.add(music);\r\n\r\n        jb1 = new JButton(\"拥抱\");\r\n        jb2 = new JButton(\"离开地球表面\");\r\n        jb3 = new JButton(\"关闭音乐\");\r\n        jb4 = new JButton(\"返回\");\r\n\r\n\r\n        jb1.setBounds(65, 40, 160, 30);\r\n        jb2.setBounds(65, 100, 160, 30);\r\n        jb3.setBounds(65, 160, 160, 30);\r\n        jb4.setBounds(65, 220, 160, 30);\r\n\r\n        music.add(jb1);\r\n        music.add(jb2);\r\n        music.add(jb3);\r\n        music.add(jb4);\r\n\r\n        jb1.addActionListener(new AbstractAction() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                MusicTool musicTool=new MusicTool();\r\n                musicTool.MusicTool1();\r\n            }\r\n        });\r\n        jb2.addActionListener(new AbstractAction() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                MusicTool musicTool=new MusicTool();\r\n                musicTool.MusicTool2();\r\n            }\r\n        });\r\n        jb3.addActionListener(new AbstractAction() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                MusicTool musicTool=new MusicTool();\r\n                musicTool.stop();\r\n            }\r\n        });\r\n\r\n        jb4.addActionListener(new AbstractAction() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                MusicFrame.this.dispose();\r\n            }\r\n        });\r\n\r\n    }\r\n    MusicTool musicTool=new MusicTool();\r\n\r\n    public MusicTool getMusicTool() {\r\n        return musicTool;\r\n    }\r\n\r\n    public void setMusicTool(MusicTool musicTool) {\r\n        this.musicTool = musicTool;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/MusicFrame.java b/src/view/MusicFrame.java
--- a/src/view/MusicFrame.java	(revision f7bc0c6152296b1101ebb1df4e12c857984298ae)
+++ b/src/view/MusicFrame.java	(date 1684769467899)
@@ -1,12 +1,12 @@
 package view;
 
-import listener.MusicTool;
-
 import javax.swing.*;
 import java.awt.event.ActionEvent;
 
 public class MusicFrame extends JFrame{
-    private static JLabel music;
+    private JLabel music;
+    private boolean Bgm1Play = false;
+    private boolean Bgm2Play = false;
     JButton jb1;
     JButton jb2;
     JButton jb3;
@@ -16,7 +16,7 @@
         this.setBounds(715,360,290,340);
         this.setLayout(null);
         this.setResizable(false);
-        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+        //this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         this.setVisible(true);
 
         music =new JLabel(new ImageIcon("image/music.png")) ;
@@ -42,22 +42,58 @@
         jb1.addActionListener(new AbstractAction() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                MusicTool musicTool=new MusicTool();
-                musicTool.MusicTool1();
+                //MusicTool musicTool=new MusicTool();
+                //musicTool.MusicTool1();
+                Bgm1Play = true;
+                Bgm2Play = false;
+                if (Bgm1Play) {
+                    MusicTool musicTool=new MusicTool();
+                    musicTool.MusicTool1();
+                    }
+                if (!Bgm1Play){
+                    musicTool.stop1();
+                }
+                if (Bgm2Play) {
+                    MusicTool musicTool=new MusicTool();
+                    musicTool.MusicTool2();
+                }
+                if (!Bgm2Play){
+                    musicTool.stop2();
+                }
             }
         });
         jb2.addActionListener(new AbstractAction() {
             @Override
             public void actionPerformed(ActionEvent e) {
-                MusicTool musicTool=new MusicTool();
-                musicTool.MusicTool2();
+                //MusicTool musicTool=new MusicTool();
+                //musicTool.MusicTool2();
+                Bgm2Play = true;
+                Bgm1Play = false;
+                if (Bgm2Play) {
+                    MusicTool musicTool=new MusicTool();
+                    musicTool.MusicTool2();
+                }else{
+                    musicTool.stop2();
+                }
+                if (Bgm1Play) {
+                    MusicTool musicTool=new MusicTool();
+                    musicTool.MusicTool1();
+                }else{
+                    musicTool.stop1();
+                }
+//                if (!Bgm1Play){
+
+//                }
             }
         });
         jb3.addActionListener(new AbstractAction() {
             @Override
             public void actionPerformed(ActionEvent e) {
+                Bgm1Play = false;
+                Bgm2Play = false;
                 MusicTool musicTool=new MusicTool();
-                musicTool.stop();
+                musicTool.stop1();
+                musicTool.stop2();
             }
         });
 
@@ -67,7 +103,6 @@
                 MusicFrame.this.dispose();
             }
         });
-
     }
     MusicTool musicTool=new MusicTool();
 
Index: src/controller/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport listener.GameListener;\r\nimport model.*;\r\nimport view.CellComponent;\r\nimport view.ChessComp;\r\nimport view.ChessboardComponent;\r\n\r\n/**\r\n * Controller is the connection between model and view,\r\n * when a Controller receive a request from a view, the Controller\r\n * analyzes and then hands over to the model for processing\r\n * [in this demo the request methods are onPlayerClickCell() and onPlayerClickChessPiece()]\r\n */\r\npublic class GameController implements GameListener {\r\n\r\n    private Chessboard model;\r\n    private ChessboardComponent view;\r\n    private PlayerColor currentPlayer;\r\n\r\n    // Record whether there is a selected piece before\r\n    private ChessboardPoint selectedPoint;\r\n    private PlayerColor winner;\r\n\r\n    public GameController(ChessboardComponent view, Chessboard model) {\r\n        this.view = view;\r\n        this.model = model;\r\n        this.currentPlayer = PlayerColor.BLUE;\r\n        view.registerController(this);\r\n        initialize();\r\n        view.repaint();\r\n    }\r\n\r\n    private void initialize() {\r\n        view.initiateChessComponent(model);\r\n    }\r\n\r\n    // after a valid move swap the player\r\n    private void swapColor() {\r\n        currentPlayer = (currentPlayer == PlayerColor.BLUE) ? PlayerColor.RED : PlayerColor.BLUE;\r\n    }\r\n\r\n    private boolean isWin() {\r\n        ChessPiece winnerPiece1 = model.getGrid()[0][3].getPiece();\r\n        ChessPiece winnerPiece2 = model.getGrid()[8][3].getPiece();\r\n        boolean case1 = winnerPiece1 != null && winnerPiece1.getOwner().equals(PlayerColor.BLUE);\r\n        boolean case2 = winnerPiece2 != null && winnerPiece2.getOwner().equals(PlayerColor.RED);\r\n        if (case1) {\r\n            winner = PlayerColor.BLUE;\r\n        } else if (case2) {\r\n            winner = PlayerColor.RED;\r\n        }\r\n        return case1 || case2;\r\n    }\r\n\r\n\r\n    // click an empty cell\r\n    @Override\r\n    public void onPlayerClickCell(ChessboardPoint point, CellComponent component) {\r\n        if (selectedPoint != null) {\r\n            model.escapeTrap(selectedPoint, point);\r\n            model.moveChessPiece(selectedPoint, point);\r\n            model.inTrap(point);\r\n            view.setChessComponentAtGrid(point, view.removeChessComponentAtGrid(selectedPoint));\r\n            if (model.inDens(point)) {\r\n                return;\r\n            }\r\n            selectedPoint = null;\r\n            swapColor();\r\n            view.repaint();\r\n        }\r\n    }\r\n\r\n    // click a cell with a chess\r\n    @Override\r\n    public void onPlayerClickChessPiece(ChessboardPoint point, ChessComp component) {\r\n        if (selectedPoint == null) {//如果还没被选中，那么就让它被选中\r\n            if (model.getChessPieceOwner(point).equals(currentPlayer)) {\r\n                selectedPoint = point;\r\n                component.setSelected(true);\r\n                //highlight(point);\r\n                component.repaint();\r\n            }\r\n        } else if (selectedPoint.equals(point)) {//如果放到自己的位置，就放弃选中\r\n            selectedPoint = null;\r\n            component.setSelected(false);\r\n            component.repaint();\r\n        } else {\r\n            if (model.isValidCapture(selectedPoint, point)) {//如果是有效动作，进行相应操作\r\n                model.captureChessPiece(selectedPoint, point);\r\n                view.removeChessComponentAtGrid(point);\r\n                view.setChessComponentAtGrid(point, view.removeChessComponentAtGrid(selectedPoint));\r\n                selectedPoint = null;\r\n                swapColor();\r\n            } else if (!model.isValidCapture(selectedPoint, point)) {\r\n                selectedPoint = null;\r\n                System.err.println(\"Illegal capture\");\r\n            }\r\n            view.repaint();\r\n            //test();\r\n        }\r\n    }\r\n\r\n    public void restart() {\r\n        view.clear();\r\n        model.initialize();\r\n        view.initiateGridComponents();\r\n        view.initiateChessComponent(model);\r\n        view.repaint();\r\n        currentPlayer = PlayerColor.BLUE;\r\n        selectedPoint = null;\r\n    }\r\n\r\n    private void test() {\r\n        int[][] test = new int[9][7];\r\n        for (int i = 0; i < model.getGrid().length; i++) {\r\n            for (int j = 0; j < model.getGrid()[i].length; j++) {\r\n                if (view.getGridComponents()[i][j] != null) {\r\n                    test[i][j] = 1;\r\n                }\r\n            }\r\n        }\r\n        for (int[] ints : test) {\r\n            for (int anInt : ints) {\r\n                System.out.print(anInt);\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n    public void highlight(ChessboardPoint point) {\r\n        model.highlight(point);\r\n        view.drawHighlight(model);\r\n        view.repaint();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/controller/GameController.java b/src/controller/GameController.java
--- a/src/controller/GameController.java	(revision f7bc0c6152296b1101ebb1df4e12c857984298ae)
+++ b/src/controller/GameController.java	(date 1684764047334)
@@ -102,8 +102,9 @@
     }
 
     public void restart() {
-        view.clear();
+        //view.clear();
         model.initialize();
+        view.clear();
         view.initiateGridComponents();
         view.initiateChessComponent(model);
         view.repaint();
Index: src/view/LogInFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.MouseEvent;\r\n\r\npublic class LogInFrame extends JFrame {\r\n    public LogInFrame() {\r\n        this.setBounds(720, 410, 220, 180);\r\n        this.setTitle(\"登录\");\r\n        //清空默认局部方式\r\n        this.setLayout(new FlowLayout(FlowLayout.LEFT));\r\n        //不能改变窗口大小\r\n        this.setResizable(false);\r\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        this.setVisible(true);\r\n\r\n\r\n        JLabel jl1 = new JLabel(\"账号:\");\r\n        JTextField username = new JTextField(\"\", 21);\r\n        JLabel jl2 = new JLabel(\"密码:\");\r\n        JTextField password = new JTextField(\"\", 21);\r\n        JPanel jp = new JPanel();\r\n        JButton jb1 = new JButton(\"登陆\");\r\n//        jb1.setBounds(0,200,70, 20);\r\n        JButton jb2 = new JButton(\"注册\");\r\n//        jb2.setBounds(90,200,70, 20);\r\n        JButton jb3 = new JButton(\"取消\");\r\n//        jb3.setBounds(180,200,70, 20);\r\n        add(jl1);\r\n        add(username);\r\n        add(jl2);\r\n        add(password);\r\n        add(jp);\r\n        jp.add(jb1);\r\n        jp.add(jb2);\r\n        jp.add(jb3);\r\n    }\r\n    public void click(MouseEvent e) {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/LogInFrame.java b/src/view/LogInFrame.java
--- a/src/view/LogInFrame.java	(revision f7bc0c6152296b1101ebb1df4e12c857984298ae)
+++ b/src/view/LogInFrame.java	(date 1684763222641)
@@ -12,7 +12,7 @@
         this.setLayout(new FlowLayout(FlowLayout.LEFT));
         //不能改变窗口大小
         this.setResizable(false);
-        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+        //this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         this.setVisible(true);
 
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"381747b6-88a9-4dd7-bfa2-e69267740b4b\" name=\"Changes\" comment=\"高亮初步\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Merge.Settings\">\r\n    <option name=\"BRANCH\" value=\"origin/master\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitToolBoxStore\">\r\n    <option name=\"projectConfigVersion\" value=\"5\" />\r\n  </component>\r\n  <component name=\"ProjectCodeStyleSettingsMigration\">\r\n    <option name=\"version\" value=\"2\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Q2dtIAjAPZpY8BCcwrYen1q5CI\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/DELL/IdeaProjects/pro&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.rainbow.brackets&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"pro\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"381747b6-88a9-4dd7-bfa2-e69267740b4b\" name=\"Changes\" comment=\"\" />\r\n      <created>1684555822562</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1684555822562</updated>\r\n      <workItem from=\"1684555824478\" duration=\"1000\" />\r\n      <workItem from=\"1684555973324\" duration=\"3803000\" />\r\n      <workItem from=\"1684561676427\" duration=\"10383000\" />\r\n      <workItem from=\"1684723437775\" duration=\"420000\" />\r\n      <workItem from=\"1684723968016\" duration=\"282000\" />\r\n      <workItem from=\"1684729074644\" duration=\"2230000\" />\r\n      <workItem from=\"1684737444377\" duration=\"5032000\" />\r\n      <workItem from=\"1684743575055\" duration=\"317000\" />\r\n      <workItem from=\"1684752915386\" duration=\"5766000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"探索\">\r\n      <created>1684558267937</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684558267937</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"细化1\">\r\n      <created>1684559723607</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684559723607</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"细化2\">\r\n      <created>1684570128349</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684570128349</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"controller完善\">\r\n      <created>1684648047049</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684648047049</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"model吃子bug fix\">\r\n      <created>1684650720617</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684650720617</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"model吃子bug fix\">\r\n      <created>1684650822607</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684650822607</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"model吃子bug fix\">\r\n      <created>1684653798589</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684653798589</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"model吃子bug fix\">\r\n      <created>1684655941762</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684655941762</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"model吃子bug fix\">\r\n      <created>1684657900150</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684657900150</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"model吃子bug fix\">\r\n      <created>1684661607816</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684661607816</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"controller吃子bug fix\">\r\n      <created>1684669644692</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684669644692</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"“内鬼”问题未解决\">\r\n      <created>1684676244679</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684676244679</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"“内鬼”问题未解决\">\r\n      <created>1684680361236</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684680361236</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"“内鬼”问题未解决\">\r\n      <created>1684688258587</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684688258587</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"重开\">\r\n      <created>1684688831833</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684688831833</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"找到初始化的bug\">\r\n      <created>1684731305773</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684731305773</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"吃子的bug终于解决了，呜呜呜\">\r\n      <created>1684741276466</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684741276466</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"现在关于游戏运行的大部分bug都无了\">\r\n      <created>1684742510701</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684742510701</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"高亮初步\">\r\n      <created>1684756582676</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1684756582676</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"20\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"探索\" />\r\n    <MESSAGE value=\"细化1\" />\r\n    <MESSAGE value=\"细化2\" />\r\n    <MESSAGE value=\"controller完善\" />\r\n    <MESSAGE value=\"model吃子bug fix\" />\r\n    <MESSAGE value=\"controller吃子bug fix\" />\r\n    <MESSAGE value=\"“内鬼”问题未解决\" />\r\n    <MESSAGE value=\"重开\" />\r\n    <MESSAGE value=\"找到初始化的bug\" />\r\n    <MESSAGE value=\"吃子的bug终于解决了，呜呜呜\" />\r\n    <MESSAGE value=\"现在关于游戏运行的大部分bug都无了\" />\r\n    <MESSAGE value=\"高亮初步\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"高亮初步\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision f7bc0c6152296b1101ebb1df4e12c857984298ae)
+++ b/.idea/workspace.xml	(date 1684766143209)
@@ -4,7 +4,18 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="381747b6-88a9-4dd7-bfa2-e69267740b4b" name="Changes" comment="高亮初步" />
+    <list default="true" id="381747b6-88a9-4dd7-bfa2-e69267740b4b" name="Changes" comment="bug">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/controller/GameController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/controller/GameController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/listener/MusicTool.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/MusicTool.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/model/Chessboard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/model/Chessboard.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/view/ChessGameFrame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/ChessGameFrame.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/view/ChessboardComponent.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/ChessboardComponent.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/view/LogInFrame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/LogInFrame.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/view/MusicFrame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/MusicFrame.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/view/SettingGameFrame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/SettingGameFrame.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -218,7 +229,14 @@
       <option name="project" value="LOCAL" />
       <updated>1684756582676</updated>
     </task>
-    <option name="localTasksCounter" value="20" />
+    <task id="LOCAL-00020" summary="bug">
+      <created>1684761150166</created>
+      <option name="number" value="00020" />
+      <option name="presentableId" value="LOCAL-00020" />
+      <option name="project" value="LOCAL" />
+      <updated>1684761150166</updated>
+    </task>
+    <option name="localTasksCounter" value="21" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -248,6 +266,7 @@
     <MESSAGE value="吃子的bug终于解决了，呜呜呜" />
     <MESSAGE value="现在关于游戏运行的大部分bug都无了" />
     <MESSAGE value="高亮初步" />
-    <option name="LAST_COMMIT_MESSAGE" value="高亮初步" />
+    <MESSAGE value="bug" />
+    <option name="LAST_COMMIT_MESSAGE" value="bug" />
   </component>
 </project>
\ No newline at end of file
Index: src/view/ChessboardComponent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\n\r\nimport controller.GameController;\r\nimport model.*;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.MouseEvent;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\nimport static model.Constant.CHESSBOARD_COL_SIZE;\r\nimport static model.Constant.CHESSBOARD_ROW_SIZE;\r\n\r\n/**\r\n * This class represents the checkerboard component object on the panel\r\n */\r\npublic class ChessboardComponent extends JComponent {\r\n    private final CellComponent[][] gridComponents = new CellComponent[CHESSBOARD_ROW_SIZE.getNum()][CHESSBOARD_COL_SIZE.getNum()];\r\n    private final int CHESS_SIZE;\r\n    private final Set<ChessboardPoint> riverCell = new HashSet<>();\r\n    private final Set<ChessboardPoint> densCell = new HashSet<>();\r\n    private final Set<ChessboardPoint> trapCell = new HashSet<>();\r\n\r\n\r\n    private GameController gameController;\r\n\r\n    public ChessboardComponent(int chessSize) {\r\n        CHESS_SIZE = chessSize;\r\n        int width = CHESS_SIZE * 7;\r\n        int height = CHESS_SIZE * 9;\r\n        enableEvents(AWTEvent.MOUSE_EVENT_MASK);// Allow mouse events to occur\r\n        setLayout(null); // Use absolute layout.\r\n        setSize(width, height);\r\n        System.out.printf(\"chessboard width, height = [%d : %d], chess size = %d\\n\", width, height, CHESS_SIZE);\r\n\r\n        initiateGridComponents();\r\n        //clear2();\r\n    }\r\n\r\n    public void clear() {\r\n        for (CellComponent[] gridComponent : gridComponents) {\r\n            for (CellComponent cellComponent : gridComponent) {\r\n                if (cellComponent != null) {\r\n                    cellComponent.removeAll();\r\n                    this.repaint();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    public void clear2() {\r\n        for (CellComponent[] gridComponent : gridComponents) {\r\n            for (CellComponent cellComponent : gridComponent) {\r\n                cellComponent.setOpaque(false);\r\n                this.repaint();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * This method represents how to initiate ChessComponent\r\n     * according to Chessboard information\r\n     */\r\n    public void initiateChessComponent(Chessboard chessboard) {\r\n        Cell[][] grid = chessboard.getGrid();\r\n        for (int i = 0; i < CHESSBOARD_ROW_SIZE.getNum(); i++) {\r\n            for (int j = 0; j < CHESSBOARD_COL_SIZE.getNum(); j++) {\r\n                if (grid[i][j].getPiece() != null) {\r\n                    ChessPiece chessPiece = grid[i][j].getPiece();\r\n                    switch (chessPiece.getName()) {\r\n                        case \"Elephant\" ->\r\n                                gridComponents[i][j].add(new ElephantComp(chessPiece.getOwner(), CHESS_SIZE,\"象\"));\r\n                        case \"Lion\" -> gridComponents[i][j].add(new LionComp(chessPiece.getOwner(), CHESS_SIZE,\"狮\"));\r\n                        case \"Tiger\" -> gridComponents[i][j].add(new TigerComp(chessPiece.getOwner(), CHESS_SIZE,\"虎\"));\r\n                        case \"Leopard\" -> gridComponents[i][j].add(new LeopardComp(chessPiece.getOwner(), CHESS_SIZE,\"豹\"));\r\n                        case \"Wolf\" -> gridComponents[i][j].add(new WolfComp(chessPiece.getOwner(), CHESS_SIZE,\"狼\"));\r\n                        case \"Dog\" -> gridComponents[i][j].add(new DogComp(chessPiece.getOwner(), CHESS_SIZE,\"狗\"));\r\n                        case \"Cat\" -> gridComponents[i][j].add(new CatComp(chessPiece.getOwner(), CHESS_SIZE,\"猫\"));\r\n                        case \"Rat\" -> gridComponents[i][j].add(new RatComp(chessPiece.getOwner(), CHESS_SIZE,\"鼠\"));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.repaint();\r\n    }\r\n\r\n    public void initiateGridComponents() {\r\n        riverCell.add(new ChessboardPoint(3, 1));\r\n        riverCell.add(new ChessboardPoint(3, 2));\r\n        riverCell.add(new ChessboardPoint(4, 1));\r\n        riverCell.add(new ChessboardPoint(4, 2));\r\n        riverCell.add(new ChessboardPoint(5, 1));\r\n        riverCell.add(new ChessboardPoint(5, 2));\r\n\r\n        riverCell.add(new ChessboardPoint(3, 4));\r\n        riverCell.add(new ChessboardPoint(3, 5));\r\n        riverCell.add(new ChessboardPoint(4, 4));\r\n        riverCell.add(new ChessboardPoint(4, 5));\r\n        riverCell.add(new ChessboardPoint(5, 4));\r\n        riverCell.add(new ChessboardPoint(5, 5));\r\n\r\n        trapCell.add(new ChessboardPoint(0, 2));\r\n        trapCell.add(new ChessboardPoint(0, 4));\r\n        trapCell.add(new ChessboardPoint(1, 3));\r\n        trapCell.add(new ChessboardPoint(8, 2));\r\n        trapCell.add(new ChessboardPoint(8, 4));\r\n        trapCell.add(new ChessboardPoint(7, 3));\r\n\r\n        densCell.add(new ChessboardPoint(0, 3));\r\n        densCell.add(new ChessboardPoint(8, 3));\r\n\r\n        for (int i = 3; i < 6; i++) {//river area\r\n            for (int j = 0; j < CHESSBOARD_COL_SIZE.getNum(); j++) {\r\n                ChessboardPoint temp = new ChessboardPoint(i, j);\r\n                CellComponent cell;\r\n                if (riverCell.contains(temp)) {\r\n                    cell = new CellComponent(Color.CYAN, calculatePoint(i, j), CHESS_SIZE);\r\n                    this.add(cell);\r\n                } else {\r\n                    cell = new CellComponent(Color.LIGHT_GRAY, calculatePoint(i, j), CHESS_SIZE);\r\n                    this.add(cell);\r\n                }\r\n                gridComponents[i][j] = cell;\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < 3; i++) {//red terrain\r\n            for (int j = 0; j < CHESSBOARD_COL_SIZE.getNum(); j++) {\r\n                ChessboardPoint temp = new ChessboardPoint(i, j);\r\n                CellComponent cell;\r\n                if (trapCell.contains(temp)) {\r\n                    cell = new CellComponent(Color.magenta, calculatePoint(i, j), CHESS_SIZE);\r\n                    this.add(cell);\r\n                } else if (densCell.contains(temp)) {\r\n                    cell = new CellComponent(Color.blue, calculatePoint(i, j), CHESS_SIZE);\r\n                    this.add(cell);\r\n                } else {\r\n                    cell = new CellComponent(Color.PINK, calculatePoint(i, j), CHESS_SIZE);\r\n                    this.add(cell);\r\n                }\r\n                gridComponents[i][j] = cell;\r\n            }\r\n        }\r\n\r\n        for (int i = 6; i < CHESSBOARD_ROW_SIZE.getNum(); i++) {\r\n            for (int j = 0; j < CHESSBOARD_COL_SIZE.getNum(); j++) {\r\n                ChessboardPoint temp = new ChessboardPoint(i, j);\r\n                CellComponent cell;\r\n                if (trapCell.contains(temp)) {\r\n                    cell = new CellComponent(Color.magenta, calculatePoint(i, j), CHESS_SIZE);\r\n                    this.add(cell);\r\n                } else if (densCell.contains(temp)) {\r\n                    cell = new CellComponent(Color.blue, calculatePoint(i, j), CHESS_SIZE);\r\n                    this.add(cell);\r\n                } else {\r\n                    cell = new CellComponent(Color.white, calculatePoint(i, j), CHESS_SIZE);\r\n                    this.add(cell);\r\n                }\r\n                gridComponents[i][j] = cell;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public void registerController(GameController gameController) {\r\n        this.gameController = gameController;\r\n    }\r\n\r\n    public void setChessComponentAtGrid(ChessboardPoint point, ChessComp chess) {\r\n        getGridComponentAt(point).add(chess);\r\n    }\r\n\r\n    public ChessComp removeChessComponentAtGrid(ChessboardPoint point) {\r\n        // Note re-validation is required after remove / removeAll.\r\n        ChessComp chess = (ChessComp) getGridComponentAt(point).getComponents()[0];\r\n        getGridComponentAt(point).removeAll();\r\n        getGridComponentAt(point).revalidate();\r\n        chess.setSelected(false);\r\n        return chess;\r\n    }\r\n\r\n    private CellComponent getGridComponentAt(ChessboardPoint point) {\r\n        return gridComponents[point.getRow()][point.getCol()];\r\n    }\r\n\r\n    private ChessboardPoint getChessboardPoint(Point point) {\r\n        System.out.println(\"[\" + point.y / CHESS_SIZE + \", \" + point.x / CHESS_SIZE + \"] Clicked\");\r\n        return new ChessboardPoint(point.y / CHESS_SIZE, point.x / CHESS_SIZE);\r\n    }\r\n\r\n    private Point calculatePoint(int row, int col) {\r\n        return new Point(col * CHESS_SIZE, row * CHESS_SIZE);\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void paintComponent(Graphics g) {\r\n        super.paintComponent(g);\r\n        ((Graphics2D) g).setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\r\n    }\r\n\r\n    @Override\r\n    protected void processMouseEvent(MouseEvent e) {\r\n        if (e.getID() == MouseEvent.MOUSE_PRESSED) {\r\n            JComponent clickedComponent = (JComponent) getComponentAt(e.getX(), e.getY());\r\n            if (clickedComponent.getComponentCount() == 0) {\r\n                System.out.print(\"None chess here and \");\r\n                gameController.onPlayerClickCell(getChessboardPoint(e.getPoint()), (CellComponent) clickedComponent);\r\n            } else {\r\n                System.out.print(\"One chess here and \");\r\n                gameController.onPlayerClickChessPiece(getChessboardPoint(e.getPoint()), (ChessComp) clickedComponent.getComponents()[0]);\r\n            }\r\n        }\r\n    }\r\n    public void drawHighlight(Chessboard chessboard) {\r\n        for (int i = 0; i < chessboard.getCanMove().size(); i++) {\r\n            //gridComponents[points.get(i).getRow()][points.get(i).getCol()].paintComponent();\r\n        }\r\n    }\r\n\r\n    public GameController getGameController() {\r\n        return gameController;\r\n    }\r\n\r\n    public CellComponent[][] getGridComponents() {\r\n        return gridComponents;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/ChessboardComponent.java b/src/view/ChessboardComponent.java
--- a/src/view/ChessboardComponent.java	(revision f7bc0c6152296b1101ebb1df4e12c857984298ae)
+++ b/src/view/ChessboardComponent.java	(date 1684764864191)
@@ -71,8 +71,7 @@
                 if (grid[i][j].getPiece() != null) {
                     ChessPiece chessPiece = grid[i][j].getPiece();
                     switch (chessPiece.getName()) {
-                        case "Elephant" ->
-                                gridComponents[i][j].add(new ElephantComp(chessPiece.getOwner(), CHESS_SIZE,"象"));
+                        case "Elephant" -> gridComponents[i][j].add(new ElephantComp(chessPiece.getOwner(), CHESS_SIZE,"象"));
                         case "Lion" -> gridComponents[i][j].add(new LionComp(chessPiece.getOwner(), CHESS_SIZE,"狮"));
                         case "Tiger" -> gridComponents[i][j].add(new TigerComp(chessPiece.getOwner(), CHESS_SIZE,"虎"));
                         case "Leopard" -> gridComponents[i][j].add(new LeopardComp(chessPiece.getOwner(), CHESS_SIZE,"豹"));
Index: src/view/SettingGameFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport controller.GameController;\r\nimport listener.MusicTool;\r\nimport model.Chessboard;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.event.ActionEvent;\r\n\r\n\r\npublic class SettingGameFrame extends JFrame {\r\n    private static JLabel background;\r\n    JButton jb1;\r\n    JButton jb2;\r\n    JButton jb3;\r\n    JButton jb7;\r\n    public SettingGameFrame(){\r\n        this.setTitle(\"设置\");\r\n        this.setBounds(715,200,290,620);\r\n        this.setLayout(null);\r\n        this.setResizable(false);\r\n        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        this.setVisible(true);\r\n\r\n        background =new JLabel(new ImageIcon(\"image/background.png\")) ;\r\n        background.setBounds(0,0,277,600);\r\n        this.add(background);\r\n\r\n        jb1 = new JButton(\"规则\");\r\n        jb2 = new JButton(\"音量\");\r\n        jb3 = new JButton(\"音乐\");\r\n        jb7 = new JButton(\"返回\");\r\n\r\n\r\n        jb1.setBounds(65, 40, 160, 30);\r\n        jb2.setBounds(65, 100, 160, 30);\r\n        jb3.setBounds(65, 160, 160, 30);\r\n        jb7.setBounds(65, 220, 160, 30);\r\n\r\n        background.add(jb1);\r\n        background.add(jb2);\r\n        background.add(jb3);\r\n        background.add(jb7);\r\n\r\n        jb1.addActionListener((e) -> JOptionPane.showMessageDialog(this, \"《斗兽棋》是一款棋类游戏，分两方对战，红蓝双方各持有8个棋子隔河相对，通过移动棋子并吃掉另一方所有棋子或者占领对方巢穴即视为胜利。\\n\" +\r\n                \"\\n\" +\r\n                \"一、棋盘介绍\\n\" +\r\n                \"棋盘呈横七列，纵九行分布。同时双方在底线设有三个陷阱，以品字排列在巢穴附近。棋盘中部有两片水域，一般称之为小河。\\n\" +\r\n                \"\\n\" +\r\n                \"二、棋子介绍\\n\" +\r\n                \"（一）棋子分布\\n\" +\r\n                \"《斗兽棋》棋子共有十六个，双方各持八只一样的棋子，分别是象、狮、虎、豹、狼、狗、猫、鼠。\\n\" +\r\n                \"\\n\" +\r\n                \"（二）棋子走法\\n\" +\r\n                \"1、每个棋子一次只能走一方格，除了己方巢穴和小河之外，前后左右均可（该条规则适用于除了狮、虎、鼠之外的其它棋子，因为这三者还有特殊走法，下文会继续介绍）；\\n\" +\r\n                \"2、老鼠过河：老鼠可以进入河里，但是在河里也只能一格一格移动；\\n\" +\r\n                \"3、狮虎跳河：狮、虎可以跳过小河，但是如果对方老鼠在河里，把跳的路线阻隔就不能跳，若对岸是对方比自己战斗力强的兽，也不可以跳过小河。\\n\" +\r\n                \"三、玩法规则\\n\" +\r\n                \"（一）大小判定\\n\" +\r\n                \"1、按照战斗力强弱排列为：象>狮>虎>豹>狼>狗>猫>鼠，但是鼠能吃象，象不能吃鼠；\\n\" +\r\n                \"2、相同的棋可以互吃；\\n\" +\r\n                \"3、敌兽走入本方陷阱，本方的任意兽类都可以吃去陷阱里的棋子。\\n\" +\r\n                \"\\n\" +\r\n                \"（二）胜负规则\\n\" +\r\n                \"攻占对方巢穴或者消灭对方所有棋子，则视为胜利。\\n\"));\r\n\r\n//        jb2.addActionListener(new AbstractAction() {\r\n//            @Override\r\n//            public void actionPerformed(ActionEvent e) {\r\n//\r\n//            }\r\n//        });\r\n        jb3.addActionListener(new AbstractAction() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                MusicFrame musicFrame=new MusicFrame();\r\n                musicFrame.setVisible(true);\r\n            }\r\n        });\r\n\r\n        jb7.addActionListener(new AbstractAction() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                SettingGameFrame.this.dispose();\r\n            }\r\n        });\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/SettingGameFrame.java b/src/view/SettingGameFrame.java
--- a/src/view/SettingGameFrame.java	(revision f7bc0c6152296b1101ebb1df4e12c857984298ae)
+++ b/src/view/SettingGameFrame.java	(date 1684763039105)
@@ -1,9 +1,5 @@
 package view;
 
-import controller.GameController;
-import listener.MusicTool;
-import model.Chessboard;
-
 import javax.swing.*;
 import java.awt.event.ActionEvent;
 
@@ -19,7 +15,7 @@
         this.setBounds(715,200,290,620);
         this.setLayout(null);
         this.setResizable(false);
-        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+        //this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         this.setVisible(true);
 
         background =new JLabel(new ImageIcon("image/background.png")) ;
Index: src/view/ChessGameFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport controller.GameController;\r\nimport listener.MusicTool;\r\nimport model.Chessboard;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\n//zhushi\r\n\r\n/**\r\n * 这个类表示游戏过程中的整个游戏界面，是一切的载体\r\n */\r\npublic class ChessGameFrame extends JFrame {\r\n    //    public final Dimension FRAME_SIZE ;\r\n    private final int WIDTH;\r\n    private final int HEIGTH;\r\n\r\n    private final int ONE_CHESS_SIZE;\r\n    private ChessboardComponent chessboardComponent;\r\n    private static JFrame enterFrame;\r\n    private static JLabel enter;\r\n    private static JLabel picture;\r\n\r\n    public ChessGameFrame(int width, int height) {\r\n        setTitle(\"2023 CS109 Project Demo\"); //设置标题\r\n        this.WIDTH = width;\r\n        this.HEIGTH = height;\r\n        this.ONE_CHESS_SIZE = (HEIGTH * 4 / 5) / 9;\r\n\r\n        setSize(WIDTH, HEIGTH);\r\n        setLocationRelativeTo(null); // Center the window.\r\n        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE); //设置程序关闭按键，如果点击右上方的叉就游戏全部关闭了\r\n        setLayout(null);\r\n\r\n        addChessboard();\r\n        addBaseLabel();\r\n        addLabel();\r\n        addBaseLabel();\r\n        addButton();\r\n    }\r\n\r\n    public ChessboardComponent getChessboardComponent() {\r\n        return chessboardComponent;\r\n    }\r\n\r\n    public void setChessboardComponent(ChessboardComponent chessboardComponent) {\r\n        this.chessboardComponent = chessboardComponent;\r\n    }\r\n\r\n    /**\r\n     * 在游戏面板中添加棋盘\r\n     */\r\n    private void addChessboard() {\r\n        chessboardComponent = new ChessboardComponent(ONE_CHESS_SIZE);\r\n        chessboardComponent.setLocation(HEIGTH / 5, HEIGTH / 10);\r\n        add(chessboardComponent);\r\n    }\r\n\r\n    /**\r\n     * 在游戏面板中添加标签\r\n     */\r\n    private void addLabel() {\r\n        JLabel statusLabel = new JLabel(\"Sample label\");\r\n        statusLabel.setLocation(HEIGTH, HEIGTH / 10);\r\n        statusLabel.setSize(200, 0);\r\n        statusLabel.setFont(new Font(\"Rockwell\", Font.BOLD, 20));\r\n        add(statusLabel);\r\n    }\r\n\r\n    public void addBaseLabel() {\r\n        JLabel chessboard = new JLabel(new ImageIcon(\"image/chessboard.png\"));\r\n        chessboard.setBounds(102, -48, 623, 900);\r\n//        this.getContentPane().add(chessboard);\r\n        add(chessboard);\r\n        picture = new JLabel(new ImageIcon(\"image/picture1.png\"));\r\n        picture.setBounds(0, 0, 1100, 810);\r\n        add(picture);\r\n    }\r\n\r\n    /**\r\n     * 在游戏面板中增加一个按钮，如果按下的话就会显示Hello, world!\r\n     */\r\n\r\n    private void addButton() {\r\n        JButton jb1 = new JButton(\"设置\");\r\n        JButton jb2 = new JButton(\"悔棋\");\r\n//        JButton jb3 = new JButton(\"认输\");\r\n        JButton jb4 = new JButton(\"再来一局\");\r\n        JButton jb5 = new JButton(\"返回主页\");\r\n\r\n        jb1.setBounds(HEIGTH, HEIGTH / 10, 200, 60);\r\n        jb2.setBounds(HEIGTH, HEIGTH / 10 + 100, 200, 60);\r\n//        jb3.setBounds(HEIGTH, HEIGTH / 10 + 200,200, 60);\r\n        jb4.setBounds(HEIGTH, HEIGTH / 10 + 200, 200, 60);\r\n        jb5.setBounds(HEIGTH, HEIGTH / 10 + 300, 200, 60);\r\n\r\n        picture.add(jb1);\r\n        picture.add(jb2);\r\n//        picture.add(jb3);\r\n        picture.add(jb4);\r\n        picture.add(jb5);\r\n        jb1.addActionListener(new AbstractAction() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                SettingGameFrame settingGameFrame = new SettingGameFrame();\r\n                settingGameFrame.setVisible(true);\r\n            }\r\n        });\r\n//        jb1.addActionListener((e) -> JOptionPane.showMessageDialog(this, \"Hello, world!\"));\r\n        jb5.addActionListener(new AbstractAction() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n//                ChessGameFrame mainFrame=new ChessGameFrame(1100,810);\r\n//                mainFrame.dispose();\r\n                ChessGameFrame.this.setVisible(false);\r\n                EnterFrame enterFrame = new EnterFrame();\r\n                enterFrame.setVisible(true);\r\n            }\r\n        });\r\n        jb4.addActionListener(new AbstractAction() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                chessboardComponent.getGameController().restart();\r\n            }\r\n        });\r\n\r\n\r\n\r\n//        jb1.setFont(new Font(\"Rockwell\", Font.BOLD, 20));\r\n\r\n    }\r\n    public void gameOver() {\r\n        //游戏结束的提示\r\n    }\r\n\r\n//    private void addLoadButton() {\r\n//        JButton button = new JButton(\"Load\");\r\n//        button.setLocation(HEIGTH, HEIGTH / 10 + 240);\r\n//        button.setSize(200, 60);\r\n//        button.setFont(new Font(\"Rockwell\", Font.BOLD, 20));\r\n//        add(button);\r\n//\r\n//        button.addActionListener(e -> {\r\n//            System.out.println(\"Click load\");\r\n//            String path = JOptionPane.showInputDialog(this,\"Input Path here\");\r\n//            gameController.loadGameFromFile(path);\r\n//        });\r\n//    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/ChessGameFrame.java b/src/view/ChessGameFrame.java
--- a/src/view/ChessGameFrame.java	(revision f7bc0c6152296b1101ebb1df4e12c857984298ae)
+++ b/src/view/ChessGameFrame.java	(date 1684762535466)
@@ -1,9 +1,5 @@
 package view;
 
-import controller.GameController;
-import listener.MusicTool;
-import model.Chessboard;
-
 import javax.swing.*;
 import java.awt.*;
 import java.awt.event.ActionEvent;
@@ -37,8 +33,9 @@
         addChessboard();
         addBaseLabel();
         addLabel();
-        addBaseLabel();
         addButton();
+        addBaseLabel();
+        //addButton();
     }
 
     public ChessboardComponent getChessboardComponent() {
Index: src/model/Chessboard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.TreeSet;\r\n\r\n/**\r\n * This class store the real chess information.\r\n * The Chessboard has 9*7 cells, and each cell has a position for chess\r\n */\r\npublic class Chessboard {\r\n    private Cell[][] grid;\r\n    private ChessboardPoint coordinate;\r\n    private HashSet<ChessboardPoint> densCoordinates = new HashSet<>();\r\n    private HashSet<ChessboardPoint> trapCoordinates = new HashSet<>();\r\n    private HashSet<ChessboardPoint> riverCoordinates = new HashSet<>();\r\n    private List<Cell> canMove = new ArrayList<>();\r\n\r\n    public Chessboard() {\r\n        this.grid =\r\n                new Cell[Constant.CHESSBOARD_ROW_SIZE.getNum()][Constant.CHESSBOARD_COL_SIZE.getNum()];//19X19\r\n        initialize();\r\n    }\r\n\r\n    public void initialize() {\r\n        clear();\r\n        initGrid();\r\n        initPieces();\r\n        initCoordinates();\r\n    }\r\n\r\n    public void initGrid() {//默认上红下蓝\r\n        grid = new Cell[Constant.CHESSBOARD_ROW_SIZE.getNum()][Constant.CHESSBOARD_COL_SIZE.getNum()];\r\n        //dens\r\n        grid[0][3] = new Cell(3);\r\n        grid[8][3] = new Cell(3);\r\n        //trap\r\n        grid[0][2] = new Cell(2);\r\n        grid[0][4] = new Cell(2);\r\n        grid[1][3] = new Cell(2);\r\n        grid[7][3] = new Cell(2);\r\n        grid[8][2] = new Cell(2);\r\n        grid[8][4] = new Cell(2);\r\n        //river\r\n        for (int i = 3; i <= 5; i++) {\r\n            for (int j = 1; j <= 2; j++) {\r\n                grid[i][j] = new Cell(1);\r\n                grid[i][j + 3] = new Cell(1);\r\n            }\r\n        }\r\n        //ground\r\n        for (int i = 0; i < grid.length; i++) {\r\n            for (int j = 0; j < grid[i].length; j++) {\r\n                if (grid[i][j] == null) {\r\n                    grid[i][j] = new Cell(0);\r\n                }\r\n            }\r\n        }\r\n        //terrain\r\n        for (int i = 0; i < grid.length; i++) {\r\n            for (int j = 0; j < grid[i].length; j++) {\r\n                if (i < 3) {\r\n                    grid[i][j].setTerrain(10);\r\n                } else if (i > 5) {\r\n                    grid[i][j].setTerrain(20);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void initPieces() {\r\n        grid[0][0].setPiece(new ChessPiece(PlayerColor.RED, \"Lion\", 7));\r\n        grid[0][6].setPiece(new ChessPiece(PlayerColor.RED, \"Tiger\", 7));\r\n        grid[1][1].setPiece(new ChessPiece(PlayerColor.RED, \"Dog\", 3));\r\n        grid[1][5].setPiece(new ChessPiece(PlayerColor.RED, \"Cat\", 2));\r\n        grid[2][2].setPiece(new ChessPiece(PlayerColor.RED, \"Leopard\", 5));\r\n        grid[2][4].setPiece(new ChessPiece(PlayerColor.RED, \"Wolf\", 4));\r\n        grid[2][0].setPiece(new ChessPiece(PlayerColor.RED, \"Rat\", 1));\r\n        grid[2][6].setPiece(new ChessPiece(PlayerColor.RED, \"Elephant\", 8));\r\n        grid[6][0].setPiece(new ChessPiece(PlayerColor.BLUE, \"Elephant\", 8));\r\n        grid[6][2].setPiece(new ChessPiece(PlayerColor.BLUE, \"Wolf\", 4));\r\n        grid[6][4].setPiece(new ChessPiece(PlayerColor.BLUE, \"Leopard\", 5));\r\n        grid[6][6].setPiece(new ChessPiece(PlayerColor.BLUE, \"Rat\", 1));\r\n        grid[7][1].setPiece(new ChessPiece(PlayerColor.BLUE, \"Cat\", 2));\r\n        grid[7][5].setPiece(new ChessPiece(PlayerColor.BLUE, \"Dog\", 3));\r\n        grid[8][0].setPiece(new ChessPiece(PlayerColor.BLUE, \"Tiger\", 7));\r\n        grid[8][6].setPiece(new ChessPiece(PlayerColor.BLUE, \"Lion\", 7));\r\n    }\r\n\r\n    public void initCoordinates() {\r\n        densCoordinates.add(new ChessboardPoint(0, 3));\r\n        densCoordinates.add(new ChessboardPoint(8, 3));\r\n        trapCoordinates.add(new ChessboardPoint(0, 2));\r\n        trapCoordinates.add(new ChessboardPoint(0, 4));\r\n        trapCoordinates.add(new ChessboardPoint(1, 3));\r\n        trapCoordinates.add(new ChessboardPoint(7, 3));\r\n        trapCoordinates.add(new ChessboardPoint(8, 2));\r\n        trapCoordinates.add(new ChessboardPoint(8, 4));\r\n        for (int i = 3; i <= 5; i++) {\r\n            for (int j = 1; j <= 2; j++) {\r\n                riverCoordinates.add(new ChessboardPoint(i, j));\r\n                riverCoordinates.add(new ChessboardPoint(i, j + 3));\r\n            }\r\n        }\r\n    }\r\n\r\n    public void clear() {\r\n        for (Cell[] cells : grid) {\r\n            for (Cell cell : cells) {\r\n                if (cell != null) {\r\n                    cell.setPiece(null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private ChessPiece getChessPieceAt(ChessboardPoint point) {\r\n        return getGridAt(point).getPiece();\r\n    }\r\n\r\n    private Cell getGridAt(ChessboardPoint point) {\r\n        return grid[point.getRow()][point.getCol()];\r\n    }\r\n\r\n    private int calculateDistance(ChessboardPoint src, ChessboardPoint dest) {\r\n        return Math.abs(src.getRow() - dest.getRow()) + Math.abs(src.getCol() - dest.getCol());\r\n    }\r\n\r\n    private ChessPiece removeChessPiece(ChessboardPoint point) {\r\n        ChessPiece chessPiece = getChessPieceAt(point);\r\n        getGridAt(point).removePiece();\r\n        return chessPiece;\r\n    }\r\n\r\n    private void setChessPiece(ChessboardPoint point, ChessPiece chessPiece) {\r\n        getGridAt(point).setPiece(chessPiece);//把指定的棋子放到指定坐标\r\n    }\r\n\r\n    public void moveChessPiece(ChessboardPoint src, ChessboardPoint dest) {\r\n        if (!isValidMove(src, dest)) {\r\n            throw new IllegalArgumentException(\"Illegal chess move!\");\r\n        }\r\n        ChessPiece piece0 = getChessPieceAt(src);\r\n        if (piece0 != null) {\r\n            if (piece0.getOwner().equals(PlayerColor.BLUE)) {\r\n                getGridAt(dest).setOccupy(2);\r\n            } else {\r\n                getGridAt(dest).setOccupy(1);\r\n            }\r\n            getGridAt(src).setOccupy(0);\r\n            setChessPiece(dest, removeChessPiece(src));\r\n        }\r\n    }\r\n\r\n    public void captureChessPiece(ChessboardPoint src, ChessboardPoint dest) {\r\n        if (!isValidCapture(src, dest)) {\r\n            throw new IllegalArgumentException(\"Illegal chess capture!\");\r\n        } else {\r\n            ChessPiece predator = getChessPieceAt(src);\r\n            if (predator.getOwner().equals(PlayerColor.BLUE)) {\r\n                getGridAt(dest).setOccupy(2);\r\n            } else {\r\n                getGridAt(dest).setOccupy(1);\r\n            }\r\n            getGridAt(src).setOccupy(0);\r\n            setChessPiece(dest, removeChessPiece(src));\r\n        }\r\n    }\r\n\r\n    public Cell[][] getGrid() {\r\n        return grid;\r\n    }\r\n\r\n    public PlayerColor getChessPieceOwner(ChessboardPoint point) {\r\n        return getGridAt(point).getPiece().getOwner();\r\n    }\r\n\r\n    public boolean isValidMove(ChessboardPoint src, ChessboardPoint dest) {\r\n        ChessPiece piece = getChessPieceAt(src);\r\n//        ChessPiece piece1= getChessPieceAt(dest);\r\n        if (piece == null || getChessPieceAt(dest) != null) {\r\n            return false;\r\n        }\r\n        if (piece.getName().equals(\"Tiger\") || piece.getName().equals(\"Lion\")) {\r\n            if (calculateDistance(src, dest) > 1) {//cross river\r\n                if (src.getCol() == dest.getCol() || src.getRow() == dest.getRow()) {\r\n                    if (pureRiver(src, dest)) {\r\n                        return getGridAt(dest).getType() == 0 && dens(src, dest);\r\n                    }\r\n                }\r\n            } else if (calculateDistance(src, dest) == 1) {//other cases\r\n                return getGridAt(dest).getType() != 1 && dens(src, dest);\r\n            }\r\n        }\r\n        if (piece.getName().equals(\"Rat\")) {\r\n            return calculateDistance(src, dest) == 1 && dens(src, dest);\r\n        }\r\n        if (getGridAt(dest).getType() != 1) {\r\n            return calculateDistance(src, dest) == 1 && dens(src, dest);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean dens(ChessboardPoint src, ChessboardPoint dest) {//不能走到自己方的兽穴里\r\n        if (getGridAt(dest).getType() == 3) {\r\n            if ((getChessPieceAt(src).getOwner().equals(PlayerColor.BLUE)\r\n                    && getGridAt(dest).getTerrain() == 20)\r\n                    || (getChessPieceAt(src).getOwner().equals(PlayerColor.RED)\r\n                    && getGridAt(dest).getTerrain() == 10)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private boolean pureRiver(ChessboardPoint start, ChessboardPoint end) {\r\n        if (start.getRow() == end.getRow()) {//横跳\r\n            int left = Math.min(start.getCol(), end.getCol()) + 1;\r\n            int right = Math.max(start.getCol(), end.getCol()) - 1;\r\n            int count = -1;\r\n            for (int i = left; i <= right; i++) {\r\n                if (grid[start.getRow()][i].getType() != 1) {\r\n                    count++;\r\n                }\r\n                if (count == -1 && noRowBarrier(start.getRow(), left, right)) {\r\n                    return true;\r\n                }\r\n            }\r\n        } else if (start.getCol() == end.getCol()) {//纵跳\r\n            int upper = Math.min(start.getRow(), end.getRow()) + 1;\r\n            int lower = Math.max(start.getRow(), end.getRow()) - 1;\r\n            int count = -1;\r\n            for (int i = upper; i <= lower; i++) {\r\n                if (grid[i][start.getCol()].getType() != 1) {\r\n                    count++;\r\n                }\r\n                if (count == -1 && noColBarrier(start.getCol(), upper, lower)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private boolean noRowBarrier(int row, int s, int e) {\r\n        int count = -1;\r\n        for (int i = s; i <= e; i++) {\r\n            if (getChessPieceAt(new ChessboardPoint(row, i)) != null) {\r\n                count++;\r\n            }\r\n        }\r\n        return count == -1;\r\n    }\r\n\r\n    private boolean noColBarrier(int col, int s, int e) {\r\n        int count = -1;\r\n        for (int i = s; i <= e; i++) {\r\n            if (getChessPieceAt(new ChessboardPoint(i, col)) != null) {\r\n                count++;\r\n            }\r\n        }\r\n        return count == -1;\r\n    }\r\n\r\n\r\n    public boolean isValidCapture(ChessboardPoint src, ChessboardPoint dest) {\r\n        ChessPiece predator = getChessPieceAt(src);\r\n        ChessPiece target = getChessPieceAt(dest);\r\n        if (predator != null && dest != null\r\n                && getGridAt(src).getOccupy() != getGridAt(dest).getOccupy()) {\r\n            switch (predator.getName()) {\r\n                case \"Lion\", \"Tiger\" -> {\r\n                    if (calculateDistance(src, dest) > 1) {//lion or tiger near the river\r\n                        if (src.getCol() == dest.getCol() || src.getRow() == dest.getRow()) {\r\n                            if (pureRiver(src, dest) && getGridAt(dest).getType() == 0) {\r\n                                return predator.canCapture(target);\r\n                            }\r\n                        }\r\n                    } else {//lion or tiger on the ground\r\n                        return predator.canCapture(target);\r\n                    }\r\n                }\r\n                case \"Rat\" -> {\r\n                    if (getGridAt(src).getType() == 1) {//rat in the river\r\n                        return false;\r\n                    } else {//rat on the ground\r\n                        return predator.canCapture(target);\r\n                    }\r\n                }\r\n                default -> {\r\n                    return predator.canCapture(target)\r\n                            && calculateDistance(src, dest) == 1\r\n                            && getGridAt(dest).getType() != 1;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void inTrap(ChessboardPoint chessboardPoint) {\r\n        if (getChessPieceAt(chessboardPoint) != null) {\r\n            if ((getChessPieceAt(chessboardPoint).getOwner().equals(PlayerColor.BLUE) && getGridAt(chessboardPoint).getTerrain() == 10)\r\n                    || (getChessPieceAt(chessboardPoint).getOwner().equals(PlayerColor.RED) && getGridAt(chessboardPoint).getTerrain() == 20)) {\r\n                if (getGridAt(chessboardPoint).getType() == 2) {\r\n                    getChessPieceAt(chessboardPoint).setRank(0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void escapeTrap(ChessboardPoint s, ChessboardPoint e) {\r\n        ChessPiece piece = getGridAt(s).getPiece();\r\n        if (getGridAt(s).getType() == 2 && getGridAt(e).getType() != 2) {\r\n            int rank = switch (piece.getName()) {\r\n                case \"Elephant\" -> 8;\r\n                case \"Lion\" -> 7;\r\n                case \"Tiger\" -> 6;\r\n                case \"Leopard\" -> 5;\r\n                case \"Wolf\" -> 4;\r\n                case \"Dog\" -> 3;\r\n                case \"Cat\" -> 2;\r\n                case \"Rat\" -> 1;\r\n                default -> 0;\r\n            };\r\n            piece.setRank(rank);\r\n        }\r\n    }\r\n\r\n    public boolean inDens(ChessboardPoint chessboardPoint) {\r\n        if (getChessPieceAt(chessboardPoint) != null) {\r\n            if (((getChessPieceAt(chessboardPoint).getOwner().equals(PlayerColor.BLUE) && getGridAt(chessboardPoint).getTerrain() == 10)\r\n                    || (getChessPieceAt(chessboardPoint).getOwner().equals(PlayerColor.RED) && getGridAt(chessboardPoint).getTerrain() == 20))) {\r\n                return getGridAt(chessboardPoint).getType() == 3;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void highlight(ChessboardPoint here) {\r\n        //if current player in controller\r\n        if (getChessPieceAt(here) == null) {\r\n            return;\r\n        }\r\n        for (int i = here.getRow() - 1; i <= here.getRow() + 1; i++) {\r\n            for (int j = here.getCol() - 1; j <= here.getCol() + 1; j++) {\r\n                if (i >= 0 && i < Constant.CHESSBOARD_ROW_SIZE.getNum()\r\n                        && j >= 0 && j < Constant.CHESSBOARD_COL_SIZE.getNum()) {\r\n                    if (isValidMove(here, grid[i][j].getCoordinate())) {\r\n                        canMove.add(grid[i][j]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<Cell> getCanMove() {\r\n        return canMove;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/Chessboard.java b/src/model/Chessboard.java
--- a/src/model/Chessboard.java	(revision f7bc0c6152296b1101ebb1df4e12c857984298ae)
+++ b/src/model/Chessboard.java	(date 1684764864184)
@@ -106,13 +106,24 @@
     }
 
     public void clear() {
-        for (Cell[] cells : grid) {
+        /*for (Cell[] cells : grid) {
             for (Cell cell : cells) {
                 if (cell != null) {
                     cell.setPiece(null);
                 }
             }
         }
+//zyq
+         */
+        for (int i = 0; i < Constant.CHESSBOARD_ROW_SIZE.getNum(); i++) {
+            for (int j = 0; j < Constant.CHESSBOARD_COL_SIZE.getNum(); j++) {
+                if (grid[i][j] != null){
+                    System.out.println("here");
+                    grid[i][j].setPiece(null);
+                }
+            }
+        }
+
     }
 
     private ChessPiece getChessPieceAt(ChessboardPoint point) {
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import controller.GameController;\r\nimport listener.MusicTool;\r\nimport model.Chessboard;\r\nimport view.ChessGameFrame;\r\nimport view.EnterFrame;\r\n\r\nimport javax.swing.*;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        SwingUtilities.invokeLater(() -> {\r\n            EnterFrame enter = new EnterFrame();\r\n//            mainFrame.setVisible(true);\r\n            enter.setVisible(true);\r\n            ChessGameFrame mainFrame = new ChessGameFrame(1100,810);\r\n            GameController gameController = new GameController(mainFrame.getChessboardComponent(), new Chessboard());\r\n\r\n        });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	(revision f7bc0c6152296b1101ebb1df4e12c857984298ae)
+++ b/src/Main.java	(date 1684762535480)
@@ -1,5 +1,4 @@
 import controller.GameController;
-import listener.MusicTool;
 import model.Chessboard;
 import view.ChessGameFrame;
 import view.EnterFrame;
